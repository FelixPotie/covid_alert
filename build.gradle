plugins {
	id 'org.springframework.boot' version '2.3.4.RELEASE'
	id 'io.spring.dependency-management' version '1.0.10.RELEASE'
	id 'java'
	id 'com.bmuschko.docker-java-application' version '6.6.1'
	id "com.github.node-gradle.node" version "2.2.4"
}

group = 'fr.polytech.iwa'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

docker {
	javaApplication {
		baseImage = 'openjdk'
		ports = [8085, 5432]
		images = ["felixpotie/covid_alert:${project.version}"]
	}
}

repositories {
	mavenCentral()
}

//node {
//	// Version of node to use.
//	version = '10.16.2'
//
//	// Base URL for fetching node distributions (change if you have a mirror).
////    distBaseUrl = 'https://nodejs.org/dist'
//
//	// If true, it will download node using above parameters.
//	// If false, it will try to use globally installed node.
//	download = true
//
//	// Set the work directory for unpacking node
//	workDir = file("${project.projectDir}/src/main/covid-alert-app/nodejs")
//
//	// Set the work directory for NPM
//	npmWorkDir = file("${project.projectDir}/src/main/covid-alert-app/npm")
//
//	// Set the work directory where node_modules should be located
//	nodeModulesDir = file("${project.projectDir}/src/main/covid-alert-app")
//}

//task npmInstallDependencies(type: NpmTask) {
//	dependsOn 'npmSetup'
//	execOverrides {
//		it.ignoreExitValue = true
//		it.workingDir = 'src/main/covid-alert-app'
//	}
//	args = ['install']
//}
//task npmBuild(type: NpmTask) {
//	dependsOn'npmInstallDependencies'
//	execOverrides {
//		it.workingDir = 'src/main/covid-alert-app'
//	}
//	args = ['run', 'build']
//}


//task copyFrontendToBuild(type: Copy) {
//	dependsOn 'npmBuild'
//	from "$projectDir/src/main/covid-alert-app/build/"
//	into "$buildDir/resources/main/static"
//}

//processResources{
//	dependsOn 'copyFrontendToBuild'
//}


dependencies {
//	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	runtimeOnly 'org.postgresql:postgresql'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
//	testImplementation 'org.springframework.security:spring-security-test'
}

test {
	useJUnitPlatform()
}
